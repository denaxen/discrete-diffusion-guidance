defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: lm1b
  - /model: small
  - /strategy: ddp
  - /noise: loglinear
  - /lr_scheduler: constant_warmup
  - /classifier_model: null
  - /guidance: null
  - /weights_averaging: ema

mode: train  # train / train_classifier / ppl_eval
diffusion: absorbing_state
backbone: dit  # dit / dimamba / ar
classifier_backbone: null
parameterization: subs  # subs / d3pm / ar
time_conditioning: False
subs_masking: False
zero_recon_loss: False  # Use for UDLM
T: 0  # 0 (continuous time) / 1000

is_vision: False
seed: 1

loader:
  global_batch_size: 512
  eval_global_batch_size: ${.global_batch_size}
  # Note: batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: ${eval:"len(__import__('os').sched_getaffinity(0))"}
  pin_memory: True
  persistent_workers: True

sampling:
  use_cache: True
  steps: 128
  # Note: batch_size is **per machine**
  batch_size: ${loader.eval_batch_size}
  num_sample_batches: 2  # Total samples: `num_gpus` * `batch_size` * `num_sample_batches`
  use_float64: False

training:
  unrolling: False
  unrolling_steps: 2
  unrolling_weight: 1.0
  unrolling_ignore_diffusion_loss: False
  antithetic_sampling: True
  importance_sampling: False
  sampling_eps: 1e-3
  change_of_variables: False
  compute_loss_on_pad_tokens: False
  use_simple_ce_loss: False  # Ignore ELBO; just use CE
  label_smoothing: 0.0
  guidance: # Can turn off with `training.guidance: null`
    cond_dropout: 0.0
  noise_schedule_warmup: False
  noise_schedule_warmup_fraction: 0.1
  noise_schedule_uniform: False
  flexible_length: False
  change_length_batches_frac: 0.01

eval:
  checkpoint_path: ''  # Used to evaluate a checkpoint after training.
  disable_ema: False
  generate_samples: True
  generated_samples_path: ''
  max_samples: 50_000
  low_confidence_sampling: False  # Run low-probability sampling during eval
  low_confidence_threshold: 0.3   # Fraction of cumulative mass for low-conf sampling

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8

trainer:
  _target_: lightning.Trainer
  accelerator: cuda
  num_nodes: 1
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0
  precision: '16-mixed'
  num_sanity_val_steps: 2
  max_steps: 1_000_000
  log_every_n_steps: 10
  limit_train_batches: 1.0   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 1.0     # validate on full dataset, can be used to toggle quick run
  val_check_interval: 10000

wandb:
  project: discrete-diffusion-guidance
  notes: Guided Discrete Diffusion
  group: null
  job_type: training
  name: null
  # id: ${.name}_${seed}
  tags:
    - ${noise.type}
    - ${data.train}
    - ${data.valid}

hydra:
  run:
    dir: ./outputs/${data.train}/${now:%Y.%m.%d}/${now:%H%M%S}
  job:
    chdir: true

checkpointing:
  # Use custom `save_dir` if, e.g., saving to S3 bucket, otherwise leave this parameter as is
  save_dir: ${cwd:}
  # Note: `checkpoints` path should correspond to `checkpoint_every_n_steps.dirpath`
  resume_from_ckpt: true
  resume_ckpt_path: ${.save_dir}/checkpoints/last.ckpt
